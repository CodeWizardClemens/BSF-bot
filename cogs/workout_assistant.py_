import sys
sys.path.append(("../../fitness_libs"))

from volumecalculator import VolumeCalculator

import discord
from discord.ext import commands
from typing import Final

"""
Discord cog module that can be loaded through an extension.
"""

class WorkoutAssistantCog(commands.Cog):
    """
    A Discord cog for describing the amount of sets per week in a message through a listener.

    The volume calculator doesn't account for set changes during a program cycle (e.g. wave periodization or volumizing)
    """

    KEY_PHRASE : Final[str] = 'volume'

    def __init__(self, bot: commands.Bot):
        self.BOT : Final[commands.Bot] = bot

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """
        Listen for a message that contains the key phrase, replying with either the total sets per week in a program or min/max sets per week

        Args:
            message (discord.Message): The message sent by a user.

        """

        not_a_volume_message : bool = not WorkoutAssistantCog.KEY_PHRASE in message.content.lower()
        if message.author == self.bot.user or not_a_volume_message:
            return

        replied_message = message.reference.resolved if message.reference else None
        if not replied_message:
            return

        min_sets_per_week, max_sets_per_week = VolumeCalculator.get_sets_per_week(replied_message.content)
        if min_sets_per_week == max_sets_per_week:
            await message.channel.send(f"Sets in this program: {min_sets_per_week}")
        else:
            await message.channel.send((f"Minimum sets: {min_sets_per_week}\n"
                                        f"Maximum sets: {max_sets_per_week}"))

async def setup(bot: commands.Bot):
    """
    Setup function to add WorkoutAssistantCog to the bot.

    Args:
        bot (commands.Bot): The bot instance.

    """
    await bot.add_cog(WorkoutAssistantCog(bot))
